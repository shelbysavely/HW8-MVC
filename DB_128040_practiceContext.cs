// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace MVC10.Models;

public partial class DB_128040_practiceContext : DbContext
{
    public DB_128040_practiceContext()
    {
    }

    public DB_128040_practiceContext(DbContextOptions<DB_128040_practiceContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Director> Directors { get; set; }

    public virtual DbSet<Movie> Movies { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Data Source=s13.winhost.com;Initial Catalog=DB_128040_practice;Persist Security Info=True;User ID=student;Password=AdamTheGreat2020; TrustServerCertificate=True;");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Director>(entity =>
        {
            entity.ToTable("Director");

            entity.Property(e => e.DirectorId)
                .ValueGeneratedNever()
                .HasColumnName("Director_Id");
            entity.Property(e => e.DirectorName)
                .IsRequired()
                .HasMaxLength(150)
                .HasColumnName("Director_Name");
        });

        modelBuilder.Entity<Movie>(entity =>
        {
            entity.ToTable("Movie");

            entity.Property(e => e.MovieId).HasColumnName("Movie_Id");
            entity.Property(e => e.Actor1FacebookLikes).HasColumnName("actor_1_facebook_likes");
            entity.Property(e => e.Actor1Name)
                .HasMaxLength(150)
                .HasColumnName("actor_1_name");
            entity.Property(e => e.Actor2FacebookLikes).HasColumnName("actor_2_facebook_likes");
            entity.Property(e => e.Actor2Name)
                .HasMaxLength(150)
                .HasColumnName("actor_2_name");
            entity.Property(e => e.Actor3FacebookLikes).HasColumnName("actor_3_facebook_likes");
            entity.Property(e => e.Actor3Name)
                .HasMaxLength(150)
                .HasColumnName("actor_3_name");
            entity.Property(e => e.AspectRatio)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("aspect_ratio");
            entity.Property(e => e.Budget).HasColumnName("budget");
            entity.Property(e => e.CastTotalFacebookLikes).HasColumnName("cast_total_facebook_likes");
            entity.Property(e => e.Color)
                .HasMaxLength(150)
                .HasColumnName("color");
            entity.Property(e => e.ContentRating)
                .HasMaxLength(150)
                .HasColumnName("content_rating");
            entity.Property(e => e.Country)
                .HasMaxLength(150)
                .HasColumnName("country");
            entity.Property(e => e.DirectorFacebookLikes).HasColumnName("director_facebook_likes");
            entity.Property(e => e.DirectorId).HasColumnName("director_id");
            entity.Property(e => e.Duration).HasColumnName("duration");
            entity.Property(e => e.FacenumberInPoster).HasColumnName("facenumber_in_poster");
            entity.Property(e => e.Genres)
                .HasMaxLength(150)
                .HasColumnName("genres");
            entity.Property(e => e.Gross).HasColumnName("gross");
            entity.Property(e => e.ImdbScore)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("imdb_score");
            entity.Property(e => e.Language)
                .HasMaxLength(150)
                .HasColumnName("language");
            entity.Property(e => e.MovieFacebookLikes).HasColumnName("movie_facebook_likes");
            entity.Property(e => e.MovieImdbLink)
                .HasMaxLength(150)
                .HasColumnName("movie_imdb_link");
            entity.Property(e => e.MovieTitle)
                .HasMaxLength(150)
                .HasColumnName("movie_title");
            entity.Property(e => e.NumCriticForReviews).HasColumnName("num_critic_for_reviews");
            entity.Property(e => e.NumUserForReviews).HasColumnName("num_user_for_reviews");
            entity.Property(e => e.NumVotedUsers).HasColumnName("num_voted_users");
            entity.Property(e => e.PlotKeywords)
                .HasMaxLength(150)
                .HasColumnName("plot_keywords");
            entity.Property(e => e.TitleYear).HasColumnName("title_year");

            entity.HasOne(d => d.Director).WithMany(p => p.Movies)
                .HasForeignKey(d => d.DirectorId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Movie_Director");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}